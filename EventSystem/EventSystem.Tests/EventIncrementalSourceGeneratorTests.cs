using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Shared.Tests;
using Xunit;

namespace EventSystem.Tests;

public class EventIncrementalSourceGeneratorTests
{
    private const string ClassText = @"
namespace TestNamespace;

[Generators.Event(typeof(EventHandler))]
public partial struct OnDoStuffEvent
{
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

[Generators.EventHandler]
public partial class EventHandler
{
}
";
    
    private const string ExpectedGeneratedHandlerClassText = @"// <auto-generated/>
namespace TestNamespace
{
    partial class EventHandler
    {
        public delegate void OnEventRaisedDelegate(Events eventType, IEvent ev);
        public event OnEventRaisedDelegate OnEventRaised;
        public delegate void OnDoStuffDelegate(TestNamespace.OnDoStuffEvent ev);
        public event OnDoStuffDelegate OnDoStuff;
        public event System.Action OnDoStuffNoArgs;
        public void Raise(TestNamespace.OnDoStuffEvent ev)
        {
            OnEventRaised?.Invoke(Events.OnDoStuff, ev);
            OnDoStuff?.Invoke(ev);
            OnDoStuffNoArgs?.Invoke();
        }
        public enum Events
        {
            OnDoStuff,
        }
        public void AddListener(Events eventType, System.Action<IEvent> listener)
        {
            switch (eventType)
            {
                case Events.OnDoStuff:
                {
                    OnDoStuffNoArgs += listener;
                    break;
                }
            }
        }
        public void RemoveListener(Events eventType, System.Action<IEvent> listener)
        {
            switch (eventType)
            {
                case Events.OnDoStuff:
                {
                    OnDoStuffNoArgs -= listener;
                    break;
                }
            }
        }
        public interface IEvent
        {
            Events EventType { get; }
        }
    }
}";
    
    private const string ExpectedGeneratedEventClassText = @"// <auto-generated/>
namespace TestNamespace
{
    partial struct OnDoStuffEvent : TestNamespace.EventHandler.IEvent
    {
        public const TestNamespace.EventHandler.Events EnumValue = TestNamespace.EventHandler.Events.OnDoStuff;
        public TestNamespace.EventHandler.Events EventType => EnumValue;
    }
}";
    
    [Fact]
    public void GenerateEventStuff()
    {
        // Create an instance of the source generator.
        var generator = new EventIncrementalSourceGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(EventIncrementalSourceGenerator),
            [CSharpSyntaxTree.ParseText(ClassText)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            ]);
        
        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedHandlerFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("EventHandler.g.cs"));
        var generatedEventFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("OnDoStuffEvent.g.cs"));

        // Complex generators should be tested using text comparison.
        TestUtils.AssertEqual(ExpectedGeneratedHandlerClassText, generatedHandlerFileSyntax);
        TestUtils.AssertEqual(ExpectedGeneratedEventClassText, generatedEventFileSyntax);
    }
}